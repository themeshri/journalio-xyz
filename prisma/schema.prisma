// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  paperedPlays  PaperedPlay[]
  tradeEdits    TradeEdit[]
  settings      UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User's wallets
model Wallet {
  id        String   @id @default(cuid())
  userId    String
  address   String
  nickname  String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades Trade[]

  @@unique([userId, address])
  @@index([address])
  @@index([userId])
}

// Cached trades from Solana Tracker API
model Trade {
  id         String   @id @default(cuid())
  walletId   String
  signature  String   @unique
  timestamp  Int
  type       String // buy, sell, swap

  // Token data stored as JSON
  tokenInData  String // JSON string
  tokenOutData String // JSON string

  amountIn   Float
  amountOut  Float
  priceUSD   Float
  valueUSD   Float
  dex        String

  createdAt  DateTime @default(now())
  indexedAt  DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  edits  TradeEdit[]

  @@index([walletId])
  @@index([timestamp])
  @@index([signature])
}

// Trade edits - manual adjustments to trades
model TradeEdit {
  id          String   @id @default(cuid())
  tradeId     String
  userId      String

  // Fields that can be edited
  editedType       String?  // Override buy/sell/swap
  editedAmountIn   Float?   // Override amount in
  editedAmountOut  Float?   // Override amount out
  editedValueUSD   Float?   // Override USD value
  notes            String?  // User notes

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tradeId, userId])
  @@index([userId])
  @@index([tradeId])
}

// Papered plays - missed opportunities
model PaperedPlay {
  id           String   @id @default(cuid())
  userId       String
  coinName     String
  mcWhenSaw    String
  ath          String
  reasonMissed String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// User settings
model UserSettings {
  id                String  @id @default(cuid())
  userId            String  @unique
  displayName       String?
  transactionLimit  Int     @default(50)
  showUSDValues     Boolean @default(true)
  darkMode          Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
